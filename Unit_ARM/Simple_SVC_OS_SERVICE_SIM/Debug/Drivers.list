
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000050c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800063c  08000644  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800063c  0800063c  00010644  2**0
                  CONTENTS
  4 .ARM          00000000  0800063c  0800063c  00010644  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800063c  08000644  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000644  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000644  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003700  00000000  00000000  0001066d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008b3  00000000  00000000  00013d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a7c  00000000  00000000  00014620  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b8  00000000  00000000  000150a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00015258  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003d24  00000000  00000000  000153c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ecb  00000000  00000000  000190ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010f7e  00000000  00000000  0001afb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002bf35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000588  00000000  00000000  0002bfb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000624 	.word	0x08000624

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000624 	.word	0x08000624

08000170 <EXTI0_IRQHandler>:
		break;
	}
}

void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<0;

	//IRQ callback
	call_back[EXTI0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000002c 	.word	0x2000002c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<1;

	//IRQ callback
	call_back[EXTI1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000002c 	.word	0x2000002c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<2;

	//IRQ callback
	call_back[EXTI2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000002c 	.word	0x2000002c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<3;

	//IRQ callback
	call_back[EXTI3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000002c 	.word	0x2000002c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<4;

	//IRQ callback
	call_back[EXTI4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000002c 	.word	0x2000002c

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){SET_BIT(EXTI->PR,EXTI5);call_back[EXTI5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6){SET_BIT(EXTI->PR,EXTI6);call_back[EXTI6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7){SET_BIT(EXTI->PR,EXTI7);call_back[EXTI7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8){SET_BIT(EXTI->PR,EXTI8);call_back[EXTI8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){SET_BIT(EXTI->PR,EXTI9);call_back[EXTI9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000002c 	.word	0x2000002c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){SET_BIT(EXTI->PR,EXTI10);call_back[EXTI10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11){SET_BIT(EXTI->PR,EXTI11);call_back[EXTI11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12){SET_BIT(EXTI->PR,EXTI12);call_back[EXTI12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13){SET_BIT(EXTI->PR,EXTI13);call_back[EXTI13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14){SET_BIT(EXTI->PR,EXTI14);call_back[EXTI14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15){SET_BIT(EXTI->PR,EXTI15);call_back[EXTI15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000002c 	.word	0x2000002c

08000390 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <SPI1_IRQHandler+0x54>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	085b      	lsrs	r3, r3, #1
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	793b      	ldrb	r3, [r7, #4]
 80003a4:	f362 0300 	bfi	r3, r2, #0, #1
 80003a8:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <SPI1_IRQHandler+0x54>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	f362 0341 	bfi	r3, r2, #1, #1
 80003ba:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <SPI1_IRQHandler+0x54>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	091b      	lsrs	r3, r3, #4
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	793b      	ldrb	r3, [r7, #4]
 80003ca:	f362 0382 	bfi	r3, r2, #2, #1
 80003ce:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(IRQ);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SPI1_IRQHandler+0x58>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	7938      	ldrb	r0, [r7, #4]
 80003d8:	4798      	blx	r3
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40013000 	.word	0x40013000
 80003e8:	2000001c 	.word	0x2000001c

080003ec <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <SPI2_IRQHandler+0x54>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	085b      	lsrs	r3, r3, #1
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	793b      	ldrb	r3, [r7, #4]
 8000400:	f362 0300 	bfi	r3, r2, #0, #1
 8000404:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <SPI2_IRQHandler+0x54>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	793b      	ldrb	r3, [r7, #4]
 8000412:	f362 0341 	bfi	r3, r2, #1, #1
 8000416:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <SPI2_IRQHandler+0x54>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	b2da      	uxtb	r2, r3
 8000424:	793b      	ldrb	r3, [r7, #4]
 8000426:	f362 0382 	bfi	r3, r2, #2, #1
 800042a:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(IRQ);
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SPI2_IRQHandler+0x58>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	7938      	ldrb	r0, [r7, #4]
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40003800 	.word	0x40003800
 8000444:	2000001c 	.word	0x2000001c

08000448 <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler (void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CallBack();
 800044c:	4b02      	ldr	r3, [pc, #8]	; (8000458 <USART1_IRQHandler+0x10>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	691b      	ldr	r3, [r3, #16]
 8000452:	4798      	blx	r3
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000024 	.word	0x20000024

0800045c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CallBack();
 8000460:	4b02      	ldr	r3, [pc, #8]	; (800046c <USART2_IRQHandler+0x10>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	4798      	blx	r3
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000024 	.word	0x20000024

08000470 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CallBack();
 8000474:	4b02      	ldr	r3, [pc, #8]	; (8000480 <USART3_IRQHandler+0x10>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	4798      	blx	r3
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000024 	.word	0x20000024

08000484 <OS_SVC_SET>:
			OS_SWITCH_SP_TO_MSP;
		}
	}
}
int OS_SVC_SET(int a, int b, int SVC_ID)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
	int result;
	switch(SVC_ID)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d005      	beq.n	80004a2 <OS_SVC_SET+0x1e>
 8000496:	2b03      	cmp	r3, #3
 8000498:	d005      	beq.n	80004a6 <OS_SVC_SET+0x22>
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <OS_SVC_SET+0x26>
	{
	case 1://ADD
		__asm("svc #0x01");
 800049e:	df01      	svc	1
		break;
 80004a0:	e003      	b.n	80004aa <OS_SVC_SET+0x26>
	case 2://SUB
		__asm("svc #0x02");
 80004a2:	df02      	svc	2
		break;
 80004a4:	e001      	b.n	80004aa <OS_SVC_SET+0x26>
	case 3://MUL
		__asm("svc #0x03");
 80004a6:	df03      	svc	3
		break;
 80004a8:	bf00      	nop
	}

	__asm("mov %0,r0 " :"=r" (result));
 80004aa:	4603      	mov	r3, r0
 80004ac:	617b      	str	r3, [r7, #20]
	return result;
 80004ae:	697b      	ldr	r3, [r7, #20]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	371c      	adds	r7, #28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <OS_SVC_services>:

void OS_SVC_services(int* StackFramePointer)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b087      	sub	sp, #28
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	unsigned int val1,val2;
	SVC_number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3318      	adds	r3, #24
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b02      	subs	r3, #2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	75fb      	strb	r3, [r7, #23]
	val1 = StackFramePointer[0];
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	613b      	str	r3, [r7, #16]
	val2 = StackFramePointer[1];
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3304      	adds	r3, #4
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60fb      	str	r3, [r7, #12]
	switch(SVC_number)
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d00b      	beq.n	80004fa <OS_SVC_services+0x40>
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d010      	beq.n	8000508 <OS_SVC_services+0x4e>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d000      	beq.n	80004ec <OS_SVC_services+0x32>
	case 3://MUL
		StackFramePointer[0] = val1*val2;
		break;
	}

}
 80004ea:	e015      	b.n	8000518 <OS_SVC_services+0x5e>
		StackFramePointer[0] = val1+val2;
 80004ec:	693a      	ldr	r2, [r7, #16]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
		break;
 80004f8:	e00e      	b.n	8000518 <OS_SVC_services+0x5e>
		StackFramePointer[0] = val1-val2;
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]
		break;
 8000506:	e007      	b.n	8000518 <OS_SVC_services+0x5e>
		StackFramePointer[0] = val1*val2;
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	fb02 f303 	mul.w	r3, r2, r3
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
		break;
 8000516:	bf00      	nop
}
 8000518:	bf00      	nop
 800051a:	371c      	adds	r7, #28
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <SVC_Handler>:
__attribute ((naked)) void SVC_Handler()
{
	__asm(	"tst lr,#4 \n\t"
 8000522:	f01e 0f04 	tst.w	lr, #4
 8000526:	bf0c      	ite	eq
 8000528:	f3ef 8008 	mrseq	r0, MSP
 800052c:	f3ef 8009 	mrsne	r0, PSP
 8000530:	f7ff bfc3 	b.w	80004ba <OS_SVC_services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_services ");
}
 8000534:	bf00      	nop
	...

08000538 <main>:
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	//	EXTI_Init(&EXTIConfig);
	//
	//
	//	MainOs();
	//	IRQ_Flag = 1;
	IRQ_Flag = OS_SVC_SET(3,3,1);
 800053c:	2201      	movs	r2, #1
 800053e:	2103      	movs	r1, #3
 8000540:	2003      	movs	r0, #3
 8000542:	f7ff ff9f 	bl	8000484 <OS_SVC_SET>
 8000546:	4603      	mov	r3, r0
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <main+0x4c>)
 800054c:	701a      	strb	r2, [r3, #0]
	IRQ_Flag = OS_SVC_SET(3,3,2);
 800054e:	2202      	movs	r2, #2
 8000550:	2103      	movs	r1, #3
 8000552:	2003      	movs	r0, #3
 8000554:	f7ff ff96 	bl	8000484 <OS_SVC_SET>
 8000558:	4603      	mov	r3, r0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <main+0x4c>)
 800055e:	701a      	strb	r2, [r3, #0]
	IRQ_Flag = OS_SVC_SET(3,3,3);
 8000560:	2203      	movs	r2, #3
 8000562:	2103      	movs	r1, #3
 8000564:	2003      	movs	r0, #3
 8000566:	f7ff ff8d 	bl	8000484 <OS_SVC_SET>
 800056a:	4603      	mov	r3, r0
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <main+0x4c>)
 8000570:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		if(IRQ_Flag)
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <main+0x4c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0fb      	beq.n	8000572 <main+0x3a>
		{
			IRQ_Flag = 0;
 800057a:	4b02      	ldr	r3, [pc, #8]	; (8000584 <main+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000580:	e7f7      	b.n	8000572 <main+0x3a>
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f811 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff ffbd 	bl	8000538 <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005cc:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 80005d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d4:	20000068 	.word	0x20000068

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	2500      	movs	r5, #0
 80005e0:	4e0c      	ldr	r6, [pc, #48]	; (8000614 <__libc_init_array+0x38>)
 80005e2:	4c0d      	ldr	r4, [pc, #52]	; (8000618 <__libc_init_array+0x3c>)
 80005e4:	1ba4      	subs	r4, r4, r6
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	42a5      	cmp	r5, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	f000 f81a 	bl	8000624 <_init>
 80005f0:	2500      	movs	r5, #0
 80005f2:	4e0a      	ldr	r6, [pc, #40]	; (800061c <__libc_init_array+0x40>)
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <__libc_init_array+0x44>)
 80005f6:	1ba4      	subs	r4, r4, r6
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	42a5      	cmp	r5, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000604:	4798      	blx	r3
 8000606:	3501      	adds	r5, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800060e:	4798      	blx	r3
 8000610:	3501      	adds	r5, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800063c 	.word	0x0800063c
 8000618:	0800063c 	.word	0x0800063c
 800061c:	0800063c 	.word	0x0800063c
 8000620:	08000640 	.word	0x08000640

08000624 <_init>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr

08000630 <_fini>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr
